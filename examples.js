'use strict';

var blankWorksheet = function blankWorksheet(selector) {
    riot.mount(selector, { cells: [] });
};

var pushExample = function pushExample() {
    //    poll(function(){ updateCell('anon1',(Math.random() * 10).toString()); },2000,acc)
    riot.mount('#list1', { cells: [{ displayComponent: 'fw-table', cell: new Cell('pushDestination') }, { displayComponent: 'fw-table', cell: new Cell('pushSource', 'poll(function(){ updateCell(\'pushDestination\',(Math.random() * 10).toString()); },2000,acc)') }] });
};

var movingAverageExample = function movingAverageExample() {
    var startCell = new Cell('inputEvents');
    var guageCell = new Cell('averageSpeed');

    riot.mount('#list1', { cells: [{ displayComponent: 'fw-speedometer', cell: guageCell }, { displayComponent: 'fw-table', cell: startCell }, { displayComponent: 'fw-table', cell: new Cell('last20events', 'valueWindow(inputEvents,acc,20)', '[]') }, { displayComponent: 'fw-table', cell: new Cell('average1', '(sum(last20events)/length(last20events))') }] });

    setTimeout(function () {
        guageCell.update('average1');

        setInterval(function () {
            startCell.update((Math.random() * 10).toString());
        }, 100);
    }, 3 * 1000);
};

var example4 = function example4() {
    riot.mount('#list1', { cells: [{ displayComponent: 'fw-speedometer', cell: new Cell() }, { displayComponent: 'fw-ajax', cell: new Cell() }, { displayComponent: 'fw-table', cell: new Cell() }, { displayComponent: 'fw-table', cell: new Cell() }, { displayComponent: 'fw-table', cell: new Cell('acc1', '(function(){ acc.push(anon3); return acc; })();', '[]') }, { displayComponent: 'fw-table', cell: new Cell('acc2', 'add((anon3 ? anon3 : 0),acc)', '0') }] });
};

var example3 = function example3() {

    var _cell1 = new Cell('cell1', '5');
    var _cell2 = new Cell('cell2', 'add(cell1,15)');

    riot.mount('#list1', { cells: [{ displayComponent: 'fw-table', cell: new Cell() }, { displayComponent: 'fw-table', cell: new Cell() }, { displayComponent: 'fw-table', cell: _cell1 }, { displayComponent: 'fw-table', cell: _cell2 }] });

    window.setTimeout(function () {
        _cell1.update('82');

        window.setTimeout(function () {
            _cell2.update('add(cell1,25)');
        }, 3000);
    }, 3000);
};
//# sourceMappingURL=data:application/json;base64,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RyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsUUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFDLGVBQWUsQ0FBQyxDQUFDOztBQUUvQyxRQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBQyxFQUFFLEtBQUssRUFBRSxDQUN6QixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUNsRCxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUNsRCxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQzlDLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FDakQsRUFBRSxDQUFDLENBQUM7O0FBRUwsVUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFVO0FBQ3hCLGNBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXBCLGNBQU0sQ0FBQyxVQUFVLENBQUMsWUFBVTtBQUN4QixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNsQyxFQUFDLElBQUksQ0FBQyxDQUFDO0tBQ1gsRUFBQyxJQUFJLENBQUMsQ0FBQztDQUNYLENBQUMiLCJmaWxlIjoic3JjL2V4YW1wbGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJsYW5rV29ya3NoZWV0ID0gZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgIHJpb3QubW91bnQoc2VsZWN0b3IseyBjZWxsczogW10gfSk7XG59O1xuXG52YXIgcHVzaEV4YW1wbGUgPSBmdW5jdGlvbigpe1xuLy8gICAgcG9sbChmdW5jdGlvbigpeyB1cGRhdGVDZWxsKCdhbm9uMScsKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoKSk7IH0sMjAwMCxhY2MpXG4gICAgcmlvdC5tb3VudCgnI2xpc3QxJyx7IGNlbGxzOiBbXG4gICAgICAgIHsgZGlzcGxheUNvbXBvbmVudDogJ2Z3LXRhYmxlJywgY2VsbDogbmV3IENlbGwoJ3B1c2hEZXN0aW5hdGlvbicpIH0sXG4gICAgICAgIHsgZGlzcGxheUNvbXBvbmVudDogJ2Z3LXRhYmxlJywgY2VsbDogbmV3IENlbGwoJ3B1c2hTb3VyY2UnLFwicG9sbChmdW5jdGlvbigpeyB1cGRhdGVDZWxsKCdwdXNoRGVzdGluYXRpb24nLChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCkpOyB9LDIwMDAsYWNjKVwiKX1cbiAgICBdfSk7XG5cbn1cblxudmFyIG1vdmluZ0F2ZXJhZ2VFeGFtcGxlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgc3RhcnRDZWxsID0gbmV3IENlbGwoJ2lucHV0RXZlbnRzJyk7XG4gICAgdmFyIGd1YWdlQ2VsbCA9IG5ldyBDZWxsKCdhdmVyYWdlU3BlZWQnKTtcblxuICAgIHJpb3QubW91bnQoJyNsaXN0MScseyBjZWxsczogW1xuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy1zcGVlZG9tZXRlcicsIGNlbGw6IGd1YWdlQ2VsbCB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy10YWJsZScsIGNlbGw6IHN0YXJ0Q2VsbCB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy10YWJsZScsIGNlbGw6IG5ldyBDZWxsKCdsYXN0MjBldmVudHMnLCd2YWx1ZVdpbmRvdyhpbnB1dEV2ZW50cyxhY2MsMjApJywnW10nKSB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy10YWJsZScsIGNlbGw6IG5ldyBDZWxsKCdhdmVyYWdlMScsJyhzdW0obGFzdDIwZXZlbnRzKS9sZW5ndGgobGFzdDIwZXZlbnRzKSknKSB9XG4gICAgXSB9KTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgZ3VhZ2VDZWxsLnVwZGF0ZSgnYXZlcmFnZTEnKTtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN0YXJ0Q2VsbC51cGRhdGUoKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH0sIDEwMCk7XG5cbiAgICB9LDMgKiAxMDAwKTtcbn07XG5cbnZhciBleGFtcGxlNCA9IGZ1bmN0aW9uKCl7XG4gICAgcmlvdC5tb3VudCgnI2xpc3QxJyx7IGNlbGxzOiBbXG4gICAgICAgIHsgZGlzcGxheUNvbXBvbmVudDogJ2Z3LXNwZWVkb21ldGVyJywgY2VsbDogbmV3IENlbGwoKSB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy1hamF4JywgY2VsbDogbmV3IENlbGwoKSB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy10YWJsZScsIGNlbGw6IG5ldyBDZWxsKCkgfSxcbiAgICAgICAgeyBkaXNwbGF5Q29tcG9uZW50OiAnZnctdGFibGUnLCBjZWxsOiBuZXcgQ2VsbCgpIH0sXG4gICAgICAgIHsgZGlzcGxheUNvbXBvbmVudDogJ2Z3LXRhYmxlJywgY2VsbDogbmV3IENlbGwoJ2FjYzEnLCcoZnVuY3Rpb24oKXsgYWNjLnB1c2goYW5vbjMpOyByZXR1cm4gYWNjOyB9KSgpOycsJ1tdJykgfSxcbiAgICAgICAgeyBkaXNwbGF5Q29tcG9uZW50OiAnZnctdGFibGUnLCBjZWxsOiBuZXcgQ2VsbCgnYWNjMicsJ2FkZCgoYW5vbjMgPyBhbm9uMyA6IDApLGFjYyknLCcwJykgfVxuICAgIF0gfSk7XG59O1xuXG52YXIgZXhhbXBsZTMgPSBmdW5jdGlvbigpe1xuXG4gICAgdmFyIF9jZWxsMSA9IG5ldyBDZWxsKCdjZWxsMScsJzUnKTtcbiAgICB2YXIgX2NlbGwyID0gbmV3IENlbGwoJ2NlbGwyJywnYWRkKGNlbGwxLDE1KScpO1xuXG4gICAgcmlvdC5tb3VudCgnI2xpc3QxJyx7IGNlbGxzOiBbXG4gICAgICAgIHsgZGlzcGxheUNvbXBvbmVudDogJ2Z3LXRhYmxlJywgY2VsbDogbmV3IENlbGwoKSB9LFxuICAgICAgICB7IGRpc3BsYXlDb21wb25lbnQ6ICdmdy10YWJsZScsIGNlbGw6IG5ldyBDZWxsKCkgfSxcbiAgICAgICAgeyBkaXNwbGF5Q29tcG9uZW50OiAnZnctdGFibGUnLCBjZWxsOiBfY2VsbDEgfSxcbiAgICAgICAgeyBkaXNwbGF5Q29tcG9uZW50OiAnZnctdGFibGUnLCBjZWxsOiBfY2VsbDIgfVxuICAgIF0gfSk7XG5cbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICBfY2VsbDEudXBkYXRlKCc4MicpO1xuXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfY2VsbDIudXBkYXRlKCdhZGQoY2VsbDEsMjUpJyk7XG4gICAgICAgIH0sMzAwMCk7XG4gICAgfSwzMDAwKTtcbn07XG4iXX0=